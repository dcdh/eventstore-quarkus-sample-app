apiVersion: v1
kind: Template
labels:
  template: todo-write-app-template
metadata:
  name: todo-write-app
objects:
  # role binding (view pour le service account default: permettre d'effectuer les requetes rest concernant le deployment config)
  - apiVersion: v1
    kind: RoleBinding
    metadata:
      name: view
    roleRef:
      name: view
    subjects:
      - kind: ServiceAccount
        name: default
  - apiVersion: v1
    kind: Service
    metadata:
      name: todo-write-app
      labels:
        app: todo-write-app
    spec:
      ports:
        - name: web
          nodePort: 0
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        name: todo-write-app
      sessionAffinity: None
    status:
      loadBalancer: {}
  - apiVersion: route.openshift.io/v1
    kind: Route
    metadata:
      name: todo-write-app
    spec:
      port:
        targetPort: web
      to:
        kind: Service
        name: todo-write-app
        weight: 100
      wildcardPolicy: None
  - apiVersion: v1
    kind: ImageStream
    metadata:
      labels:
        app: todo-write-app
      name: todo-write-app
    spec:
      lookupPolicy:
        local: true
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      name: todo-write-app
    spec:
      serviceName: todo-write-app
      replicas: 1
      selector:
        matchLabels:
          app: todo-write-app
      template:
        metadata:
          annotations:
            alpha.image.policy.openshift.io/resolve-names: '*'
          labels:
            app: todo-write-app
        spec:
          initContainers:
            - name: wait-for-debezium-connector-pod
              image: giantswarm/tiny-tools
              command: ["sh", "-c", "while `curl -s --cacert /var/run/secrets/kubernetes.io/serviceaccount/service-ca.crt --header \"Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)\" https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace)/deploymentconfigs/debezium-connect | jq \".status.availableReplicas == 0\"` ; do echo \"waiting for debezium-connector pod\"; sleep 2; done; exit 0;"]
          containers:
            - name: todo-write-app
              env:
                - name: EVENTSTORE_DATABASE_USER
                  value: postgresuser
                - name: EVENTSTORE_DATABASE_PASSWORD
                  value: postgrespassword
                - name: OPENSHIFT_NAMESPACE
                  valueFrom:
                    fieldRef:
                      apiVersion: v1
                      fieldPath: metadata.namespace
                - name: JAVA_OPTIONS
                  value: >-
                    -Dquarkus.http.host=0.0.0.0
                    -Djava.util.logging.manager=org.jboss.logmanager.LogManager
                    -Dquarkus.datasource.url=jdbc:postgresql://eventstore.$(OPENSHIFT_NAMESPACE).svc:5432/eventstore
                    -Dquarkus.http.port=8080
                    -Dquarkus.datasource.username=$(EVENTSTORE_DATABASE_USER)
                    -Dquarkus.datasource.password=$(EVENTSTORE_DATABASE_PASSWORD)
                    -Xmx256m
              image: todo-write-app:latest
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
                  name: web
              livenessProbe:
                httpGet:
                  path: /health/live
                  port: 8080
                initialDelaySeconds: 5
                timeoutSeconds: 10
              readinessProbe:
                httpGet:
                  path: /health/ready
                  port: 8080
                initialDelaySeconds: 2
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 256Mi

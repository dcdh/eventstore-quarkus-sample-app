apiVersion: v1
kind: Template
labels:
  template: postgresql-persistent-statefulset-template
message: |-
  The following service(s) have been created in your project: ${DATABASE_SERVICE_NAME}.

         Username: ${POSTGRESQL_USER}
         Password: ${POSTGRESQL_PASSWORD}
    Database Name: ${POSTGRESQL_DATABASE}
   Connection URL: postgresql://${DATABASE_SERVICE_NAME}:5432/

  For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.
metadata:
  annotations:
    description: |-
      PostgreSQL database service, with persistent storage. For more information about using this template, including OpenShift considerations, see https://github.com/sclorg/postgresql-container/.

      NOTE: Scaling to more than one replica is not supported. You must have persistent volumes available in your cluster to use this template.
    iconClass: icon-postgresql
    openshift.io/display-name: PostgreSQL (using statefulset persistence)
    openshift.io/documentation-url: https://docs.okd.io/latest/using_images/db_images/postgresql.html
    openshift.io/long-description: This template provides a standalone PostgreSQL
      server with a database created.  The database is stored on persistent storage.  The
      database name, username, and password are chosen via parameters when provisioning
      this service.
    openshift.io/provider-display-name: Red Hat, Inc.
    openshift.io/support-url: https://access.redhat.com
    tags: database,postgresql,statefulset
  name: postgresql-persistent-statefulset
objects:
  - apiVersion: v1
    kind: Secret
    metadata:
      annotations:
        template.openshift.io/expose-database_name: "{.data['database-name']}"
        template.openshift.io/expose-password: "{.data['database-password']}"
        template.openshift.io/expose-username: "{.data['database-user']}"
      name: "${DATABASE_SERVICE_NAME}"
    stringData:
      database-name: "${POSTGRESQL_DATABASE}"
      database-password: "${POSTGRESQL_PASSWORD}"
      database-user: "${POSTGRESQL_USER}"
  - apiVersion: v1
    kind: Service
    metadata:
      annotations:
        template.openshift.io/expose-uri: postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}
      name: "${DATABASE_SERVICE_NAME}"
    spec:
      ports:
        - name: postgresql
          port: 5432
          protocol: TCP
      clusterIP: None
      selector:
        name: "${DATABASE_SERVICE_NAME}"
  - apiVersion: apps/v1
    kind: StatefulSet
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: 'true'
      name: "${DATABASE_SERVICE_NAME}"
    spec:
      serviceName: "${DATABASE_SERVICE_NAME}"
      replicas: 1
      selector:
        matchLabels:
          app: "${DATABASE_SERVICE_NAME}"
      template:
        metadata:
          labels:
            app: "${DATABASE_SERVICE_NAME}"
        spec:
          containers:
            - name: postgresql
              env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: "${DATABASE_SERVICE_NAME}"
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: "${DATABASE_SERVICE_NAME}"
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: "${DATABASE_SERVICE_NAME}"
              image: dcdh1983/postgresql-10-debezium-centos7:latest
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 5432
                  protocol: TCP
              livenessProbe:
                exec:
                  command:
                    - "/usr/libexec/check-container"
                    - "--live"
                initialDelaySeconds: 120
                timeoutSeconds: 10
              readinessProbe:
                exec:
                  command:
                    - "/usr/libexec/check-container"
                initialDelaySeconds: 5
                timeoutSeconds: 1
              resources:
                limits:
                  memory: ${MEMORY_LIMIT}
              volumeMounts:
                - name: "${DATABASE_SERVICE_NAME}-data"
                  mountPath: "/var/lib/pgsql/data"
      volumeClaimTemplates:
        - metadata:
            name: "${DATABASE_SERVICE_NAME}-volume"
            annotations:
              volume.alpha.kubernetes.io/storage-class: anything
          spec:
            accessModes: [ "ReadWriteOnce" ]
            resources:
              requests:
                storage: "${VOLUME_CAPACITY}"
parameters:
  - description: Maximum amount of memory the container can use.
    displayName: Memory Limit
    name: MEMORY_LIMIT
    required: true
    value: 512Mi
  - description: The name of the OpenShift Service exposed for the database.
    displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    required: true
    value: postgresql
  - description: Username for PostgreSQL user that will be used for accessing the database.
    displayName: PostgreSQL Connection Username
    from: user[A-Z0-9]{3}
    generate: expression
    name: POSTGRESQL_USER
    required: true
  - description: Password for the PostgreSQL connection user.
    displayName: PostgreSQL Connection Password
    from: "[a-zA-Z0-9]{16}"
    generate: expression
    name: POSTGRESQL_PASSWORD
    required: true
  - description: Name of the PostgreSQL database accessed.
    displayName: PostgreSQL Database Name
    name: POSTGRESQL_DATABASE
    required: true
    value: sampledb
  - description: Volume space available for data, e.g. 512Mi, 2Gi.
    displayName: Volume Capacity
    name: VOLUME_CAPACITY
    required: true
    value: 1Gi

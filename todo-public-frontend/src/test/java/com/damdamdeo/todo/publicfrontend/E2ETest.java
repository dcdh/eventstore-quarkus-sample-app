package com.damdamdeo.todo.publicfrontend;

import com.jayway.restassured.module.jsv.JsonSchemaValidator;
import io.quarkus.test.junit.QuarkusTest;
import io.restassured.RestAssured;
import org.eclipse.microprofile.config.inject.ConfigProperty;
import org.hamcrest.Matchers;
import org.junit.jupiter.api.Test;
import org.keycloak.representations.AccessTokenResponse;

import javax.ws.rs.core.MediaType;

import java.util.UUID;
import java.util.concurrent.TimeUnit;

import static io.restassured.RestAssured.given;
import static org.awaitility.Awaitility.await;
import static org.hamcrest.core.IsEqual.equalTo;

@QuarkusTest
public class E2ETest extends AbstractTodoTest {

    private static final UUID nullUUID = UUID.fromString("00000000-0000-0000-0000-000000000000");

    private static final String USERNAME_TO_CONNECT_WITH = "damdamdeo";
    private static final String USERNAME_PASSWORD = "damdamdeo";

    @ConfigProperty(name = "quarkus.oidc.auth-server-url")
    String keyCloakServerAuthUrl;

    @Test
    public void should_user_be_connected_to_create_new_todo() {
        given()
                .param("description", "lorem ipsum")
                .when()
                .log().all()
                .post("/todos/createNewTodo")
                .then().log().all()
                .statusCode(401);
    }

    @Test
    public void should_user_be_connected_to_mark_todo_as_completed() {
        given()
                .param("todoId", "osef")
                .when()
                .post("/todos/markTodoAsCompleted")
                .then().log().all()
                .statusCode(401);
    }

    @Test
    public void should_user_be_connected_to_get_todo() {
        given()
                .when()
                .get(String.format("/todos/osef"))
                .then().log().all()
                .statusCode(401);
    }

    @Test
    public void should_user_be_connected_to_get_all_todos() {
        given()
                .get("/todos")
                .then()
                .log().all()
                .statusCode(401);
    }

    @Test
    public void should_api_create_todo() {
        final String autoGeneratedTodoId = given()
                .auth().oauth2(getAccessToken())
                .param("description", "lorem ipsum")
                .when()
                .log().all()
                .post("/todos/createNewTodo")
                .then().log().all()
                .statusCode(200)
                .body(JsonSchemaValidator.matchesJsonSchemaInClasspath("expected/todo.json"))
                .body("description", equalTo("lorem ipsum"))
                .body("todoStatus", equalTo("IN_PROGRESS"))
                .body("version", equalTo(0))
                .body("canMarkTodoAsCompleted", equalTo(true))
                .extract()
                .path("todoId");
        await().atMost(10, TimeUnit.SECONDS).until(() ->
                given()
                        .auth().oauth2(getAccessToken())
                        .when().get(String.format("/todos/%s", autoGeneratedTodoId)).statusCode() == 200
        );
        given()
                .auth().oauth2(getAccessToken())
                .when()
                .get(String.format("/todos/%s", autoGeneratedTodoId))
                .then().log().all()
                .statusCode(200)
                .body(JsonSchemaValidator.matchesJsonSchemaInClasspath("expected/todo.json"))
                .body("todoId", equalTo(autoGeneratedTodoId))
                .body("description", equalTo("lorem ipsum"))
                .body("todoStatus", equalTo("IN_PROGRESS"))
                .body("version", equalTo(0))
                .body("canMarkTodoAsCompleted", equalTo(true));
        given()
                .auth().oauth2(getAccessToken())
                .get("/todos")
                .then()
                .log().all()
                .statusCode(200)
                .body("$.size()", equalTo(1))
                .body("[0].todoId", equalTo(autoGeneratedTodoId))
                .body("[0].description", equalTo("lorem ipsum"))
                .body("[0].todoStatus", equalTo("IN_PROGRESS"))
                .body("[0].canMarkTodoAsCompleted", equalTo(true))
                .body("[0].version", equalTo(0));
    }

    @Test
    public void should_api_mark_todo_as_completed() {
        final String autoGeneratedTodoId = given()
                .auth().oauth2(getAccessToken())
                .param("description", "lorem ipsum")
                .when()
                .post("/todos/createNewTodo")
                .then()
                .statusCode(200)
                .extract()
                .path("todoId");

        given()
                .auth().oauth2(getAccessToken())
                .param("todoId", autoGeneratedTodoId)
                .when()
                .post("/todos/markTodoAsCompleted")
                .then()
                .statusCode(200)
                .body(JsonSchemaValidator.matchesJsonSchemaInClasspath("expected/todo.json"))
                .body("todoId", equalTo(autoGeneratedTodoId))
                .body("description", equalTo("lorem ipsum"))
                .body("todoStatus", equalTo("COMPLETED"))
                .body("version", equalTo(1))
                .body("canMarkTodoAsCompleted", equalTo(false));
    }

    @Test
    public void should_api_handle_exception_from_remote_service() {
        given()
                .auth().oauth2(getAccessToken())
                .when()
                .get(String.format("/todos/%s", nullUUID.toString()))
                .then()
                .statusCode(404)
                .contentType(MediaType.TEXT_PLAIN)
                .body(Matchers.equalTo(String.format("Le todoId '%s' est inconnu.", nullUUID.toString())));
    }

    private String getAccessToken() {
        return RestAssured
                .given()
                .param("grant_type", "password")
                .param("username", USERNAME_TO_CONNECT_WITH)
                .param("password", USERNAME_PASSWORD)
                .param("client_id", "todo-public-frontend-service")
                .param("client_secret", "secret")
                .when()
                .post(keyCloakServerAuthUrl + "/protocol/openid-connect/token")
                .as(AccessTokenResponse.class).getToken();
    }

}
